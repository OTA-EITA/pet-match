name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.55.2
        args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ""
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Build services
      run: |
        mkdir -p bin
        cd services/pet-service && go build -o ../../bin/pet-service .
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: petmatch-binaries
        path: bin/

  # Web App lint and test
  web-app-test:
    name: Web App Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web-app/package-lock.json

    - name: Install dependencies
      working-directory: web-app
      run: npm ci

    - name: Run TypeScript check
      working-directory: web-app
      run: npx tsc --noEmit

    - name: Run lint
      working-directory: web-app
      run: npm run lint

    - name: Build check
      working-directory: web-app
      run: npm run build

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test, web-app-test]
    strategy:
      fail-fast: false
      matrix:
        service:
          - pet-service
          - auth-service
          - user-service
          - api-gateway
          - web-app
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
    
    # CI環境での競合問題対策
    - name: Setup build environment
      run: |
        # ユニークなビルドIDを生成（CI競合回避）
        echo "BUILD_ID=${{ github.run_id }}-${{ github.run_attempt }}-${{ strategy.job-index }}" >> $GITHUB_ENV
        echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
        
        # Docker環境のクリーンアップ
        docker system prune -f || true
        docker builder prune -f || true

    - name: Build Go services
      if: matrix.service != 'web-app'
      run: |
        docker build \
          --no-cache \
          --progress=plain \
          --build-arg BUILD_ID=${{ env.BUILD_ID }} \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          -f services/${{ matrix.service }}/Dockerfile \
          -t petmatch/${{ matrix.service }}:${{ github.sha }} \
          .

    - name: Build Web App
      if: matrix.service == 'web-app'
      run: |
        docker build \
          --no-cache \
          --progress=plain \
          --build-arg BUILD_ID=${{ env.BUILD_ID }} \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          -f web-app/Dockerfile \
          -t petmatch/web-app:${{ github.sha }} \
          ./web-app

    # ビルド後のクリーンアップ（競合回避）
    - name: Cleanup build environment
      if: always()
      run: |
        docker system prune -f || true
        docker builder prune -f || true

  # 統合テスト（オプション）
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup test environment
      run: |
        # Kubernetesテスト環境のセットアップ
        # または Docker Composeでの統合テスト
        echo "Integration tests would run here"
